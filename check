#!/bin/bash


# SPDX-License-Identifier: GPL-3.0-or-later

# DCSDCHK
# Dreamcast disc image utility that checks, converts and renames DCSDRIP dumps

# Copyright (C) 2024 Jon Blau

# This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Script version

declare -r version="0.9"

# Script path

declare -r script="${0}"
declare -r path="$(cd "$(dirname "${script}")" || exit 1 ; pwd -P)"
declare -r temp="$(mktemp -d)"

cd "${path}"

# Script argument

[[ "${*}" =~ '--zip' ]] && zip_mode='true'


# Data base information
#

function get_db_info
{
     redump="db/redump.dat"

     [[ ! -f "${redump}" ]] &&
     {
          echo -e "\n   \e[41m missing redump data base \e[0m\n"
          exit 2
     }

     declare -r redump_version="$(get_db_version "${redump}")"

     tosec_j="db/tosec-j.dat"
     tosec_u="db/tosec-u.dat"
     tosec_e="db/tosec-e.dat"

     [[ ! -f "${tosec_j}" ]] || [[ ! -f "${tosec_u}" ]] || [[ ! -f "${tosec_e}" ]] &&
     {
          echo -e "\n   \e[41m missing TOSEC data base \e[0m\n"
          exit 3
     }

     declare -r tosec_j_version="$(get_db_version "${tosec_j}")"
     declare -r tosec_u_version="$(get_db_version "${tosec_u}")"
     declare -r tosec_e_version="$(get_db_version "${tosec_e}")"

     print_db_info
}

function get_db_version
{
     local data_base="${1}"

     db_version="$(grep '<version>' "${data_base}")"
     db_version="${db_version:11:10}"

     echo "${db_version}"
}

function print_db_info
{
     echo -e "\n   TOSEC-J       TOSEC-U       TOSEC-E       Redump"
     echo -e "   ${tosec_j_version}    ${tosec_u_version}    ${tosec_e_version}    ${redump_version}\n"
}


# Header information
#

function get_header_info
{
     header="gd/info.txt"

     [[ ! -f "${header}" ]] &&
     {
          echo -e "\n   \e[41m missing header file \e[0m\n"
          exit 4
     }

     header_info="$(cat "${header}")"

     header_boot="${header_info:108:12}"
     header_boot="${header_boot//' '}"

     header_region="${header_info:54:3}"
     header_region="${header_region//' '}"
     header_revision="${header_info:82:6}"
     header_revision="${header_revision//' '}"
     header_title="${header_info:144}"
     header_title="${header_title//$'\r'}"

     header_format="${header_info:41:6}"
     header_number="${header_info:47:3}"
     header_serial="${header_info:72:10}"
     header_release="${header_info:90:8}"

     print_header_info
}

function print_header_info
{
     [[ "${header_boot}" == '0WINCEOS.BIN' ]] && echo -e "\n   째 boot \t Microsoft Windows CE OS"
     [[ "${header_boot}" == '1ST_READ.BIN' ]] && echo -e "\n   째 boot \t SEGA Dreamcast OS"

     echo -e "   째 game \t ${header_title} ${header_revision} ${header_region}"

     echo -e "   째 disc \t ${header_format} ${header_number} ${header_release} ${header_serial}\n"
}


# File information
#

function get_file_info
{
     echo ""

     dot_bin="gd/track*.bin"
     dot_raw="gd/track*.raw"

     IFS=$'\n' ; declare -a file_list=($(ls -1 ${dot_bin} ${dot_raw} 2> /dev/null))

     file_count=${#file_list[@]}

     for (( i=0 ; i<${file_count} ; i++ )) ; do

          file_path[i+1]="${file_list[i]}"

          file_name[i+1]="$(get_name "${file_list[i]}")"
          file_size[i+1]="$(get_size "${file_list[i]}")"
          file_md5[i+1]="$(get_md5 "${file_list[i]}")"

          print_file_info "${file_name[i+1]}" "${file_size[i+1]}" "${file_md5[i+1]}"

     done

     dot_gdi="gd/disc.gdi"

     gdi_name="$(get_name "${dot_gdi}")"
     gdi_size="$(get_size "${dot_gdi}")"
     gdi_md5="$(get_md5 "${dot_gdi}")"

     print_file_info "${gdi_name}" "${gdi_size}" "${gdi_md5}"
}

function get_name
{
     local file="${1}"

     file_name="$(basename "${file}")"

     echo "${file_name}"
}

function get_size
{
     local file="${1}"

     file_size="$(wc -c < "${file}")"

     echo "${file_size}"
}

function get_md5
{
     local file="${1}"

     file_md5="$(md5sum "${file}")"
     file_md5="${file_md5:0:32}"

     echo "${file_md5}"
}

function print_file_info
{
     local file_name="${1}" file_size="${2}" file_md5="${3}"

     echo -e "   | name \t ${file_name}"
     echo -e "   | size \t ${file_size}"
     echo -e "   | md5  \t ${file_md5}\n"
}


# TOSEC identification
#

function identify_tosec
{
     [[ "${header_region}" == 'J' ]] && data_base="${tosec_j}"
     [[ "${header_region}" == 'U' ]] && data_base="${tosec_u}"
     [[ "${header_region}" == 'E' ]] && data_base="${tosec_e}"

     for (( i=0 ; i<${file_count} ; i++ )) ; do

          list_tosec "${file_md5[i+1]}"

     done

     title_list="$(sort "${temp}/tosec_list" | uniq -c)"
     title_count=$(echo "${title_list}" | wc -l)

     for (( i=0 ; i<${title_count} ; i++ )) ; do

          title_info="$(print_line $((i+1)) <(echo "${title_list}"))"

          title="${title_info:8}"
          repeat="${title_info:0:7}"

          (( ${repeat} >= ${file_count} )) && tosec_name="${title}" && break

     done

     [[ ! "${tosec_name}" ]] &&
     {
          echo -e "\n   \e[41m unknown disc or corrupted dump \e[0m\n"
          exit 5
     }

     check_gdi && print_name
}

function print_line
{
     local number=${1} file="${2}"

     content="$(head --lines=$((${number})) "${file}" | tail --lines=1)"

     echo "${content}"
}

function list_tosec
{
     local file_md5="${1}"

     match_count=$(grep -c "${file_md5}" "${data_base}")

     for (( j=0 ; j<${match_count} ; j++ )) ; do

          # match line number

          match_info="$(print_line $((j+1)) <(grep -n "${file_md5}" "${data_base}"))"
          match_line="${match_info%\:*}"

          # title line number

          track=$((i+1))
          title_line=$((${match_line}-${track}-2))

          # title

          match_title="$(print_line $((${title_line})) "${data_base}")"

          [[ ! "${match_title}" =~ "<game name=" ]] && title_line=$((${title_line}+1))

          match_title="$(print_line $((${title_line})) "${data_base}")"
          match_title="${match_title:13:-3}"

          echo "${match_title}" >> "${temp}/tosec_list"

     done
}

function check_gdi
{
     gdi_info="$(grep -F "${tosec_name}.gdi" "${data_base}")"

     [[ ! "${gdi_info}" =~ "${gdi_md5}" ]] &&
     {
          echo -e "\n   \e[41m incorrect gdi sheet \e[0m\n"
          exit 6
     }

     return 0
}

function print_name
{
     tosec_name="${tosec_name//'&apos;'/\'}"

     case "${header_region}" in

          'J'|'U')  echo -e "\n   \e[33m ${tosec_name} \e[0m\n" ;;
          'E')      echo -e "\n   \e[34m ${tosec_name} \e[0m\n" ;;
          *)        echo -e "\n   \e[37m ${tosec_name} \e[0m\n" ;;

     esac
}


# Redump identification
#

function identify_redump
{
     echo ""

     local data_base="${redump}"

     declare -i match_count
     declare -i total_count

     list_redump "${file_md5[1]}"
     list_redump "${file_md5[3]}"

     IFS=$'\n' ; declare -a title_list=($(sort "${temp}/redump_list" | uniq -c))

     title_count=${#title_list[@]}

     for (( i=0 ; i<${title_count} ; i++ )) ; do

          title="${title_list[i]:8}"
          repeat="${title_list[i]:0:7}"

          probability=$((${repeat} * 100 / ${total_count}))

          print_title

     done
}

function list_redump
{
     local track_md5=${1}

     match_count=$(grep -c "${track_md5}" "${data_base}")
     total_count+=${match_count}

     (( ${match_count} == 0 )) &&
     {
          echo -e "\n   \e[41m unknown disc or corrupted dump \e[0m\n"
          exit 7
     }

     for (( i=1 ; i<${match_count}+1 ; i++ )) ; do

          match_title="$(print_line $((i)) <(grep "${track_md5}" "${data_base}"))"

          match_title="${match_title% (Track [0-9]*}"
          match_title="${match_title:13}"

          echo "${match_title}" >> "${temp}/redump_list"

     done
}

function print_title
{
     (( ${probability} != 100 )) && echo "   | ${probability} %"

     case "${header_region}" in

          'J'|'U')  echo -e "   \e[33m ${title} \e[0m" ;;
          'E')      echo -e "   \e[34m ${title} \e[0m" ;;
          *)        echo -e "   \e[37m ${title} \e[0m" ;;

     esac
}

function select_name
{
     (( ${probability} == 100 )) && redump_name="${title}" ||
     {
          echo -e "\n   Selection"
          read -p "   " redump_name
     }

     create_dir

     echo ""
}

function create_dir
{
     game_dir="archive/${redump_name}"

     mkdir -p "${game_dir}"
}


# ROM information
#

function get_rom_info
{
     echo ""

     data_base="${redump}"

     # bin type

     IFS=$'\n' ; declare -a bin_list=($(grep "${redump_name} (Track " "${data_base}"))

     bin_count=${#bin_list[@]}

     (( ${bin_count} != ${file_count} )) &&
     {
          echo -e "\n   \e[41m ${bin_count} tracks expected | ${file_count} provided \e[0m\n"
          exit 8
     }

     for (( i=0 ; i<${bin_count} ; i++ )) ; do

          bin_info="${bin_list[i]}"

          bin_name[i+1]="$(echo "${bin_info}" | cut -d '"' -f 2)"
          bin_size[i+1]="$(echo "${bin_info}" | cut -d '"' -f 4)"
          bin_md5[i+1]="$(echo "${bin_info}" | cut -d '"' -f 8)"

          print_rom_info "${bin_name[i+1]}" "${bin_size[i+1]}" "${bin_md5[i+1]}"

     done

     # cue type

     cue_info="$(grep "${redump_name}.cue" "${data_base}")"

     cue_name="${redump_name}.cue"
     cue_size="$(echo "${cue_info}" | cut -d '"' -f 4)"
     cue_md5="$(echo "${cue_info}" | cut -d '"' -f 8)"

     print_rom_info "${cue_name}" "${cue_size}" "${cue_md5}"
}

function print_rom_info
{
     local rom_name="${1}" rom_size="${2}" rom_md5="${3}"

     echo -e "   | name \t ${rom_name}"
     echo -e "   | size \t ${rom_size}"
     echo -e "   | md5  \t ${rom_md5}\n"
}


# Offset calculation
#

function define_offset
{
     # low density session

     audio_low='gd/track02.raw'

     null_low=$(measure_null "${audio_low}")
     disc_low=$(compute_offset ${null_low})

     print_offset "low" "${null_low}" "${disc_low}"

     sp/write -n "${temp}/null_low" ${null_low}

     # high density session

     audio_high='gd/track04.raw'

     [[ ! -f "${audio_high}" ]] && echo "" && return 0

     null_high=$(measure_null "${audio_high}")
     disc_high=$(compute_offset ${null_high})

     print_offset "high" ${null_high} ${disc_high}

     sp/write -n "${temp}/null_high" ${null_high}

     echo ""
}

function measure_null
{
     local audio_track="${1}"

     IFS=" " ; declare -a byte=($(sp/read "${audio_track}" 5000 0))

     for (( i=0 ; i<5000 ; i++ )) ; do

          [[ "${byte[i]}" != "00" ]] && null_size=${i} && break

     done

     echo ${null_size}
}

function compute_offset
{
     local null_size="${1}"

     # bytes then samples

     disc_offset=$((${null_size}-2736))
     disc_offset=$((${disc_offset}/4))

     echo ${disc_offset}
}

function print_offset
{
     local session_type="${1}" null_size="${2}" disc_offset="${3}"

     echo -e "\n   ${session_type} density session"

     echo -e "\n   * null \t ${null_size} bytes"

     (( ${disc_offset} > 0 )) && echo -e "   * disc \t + ${disc_offset} samples"
     (( ${disc_offset} == 0 )) && echo -e "   * disc \t ${disc_offset} sample"
     (( ${disc_offset} < 0 )) && echo -e "   * disc \t - ${disc_offset/-} samples"
}


# Track correction
#

function define_status
{
     for (( i=0 ; i<${file_count} ; i++ )) ; do

          if [[ "${bin_md5[i+1]}" == "${file_md5[i+1]}" ]] ; then

               fine_list+=($((i+1)))

               cp "${file_path[i+1]}" "${game_dir}/${bin_name[i+1]}"

          else

               task_list+=($((i+1)))

               # bytes then sectors

               diff_size[i+1]=$((${bin_size[i+1]}-${file_size[i+1]}))
               diff_size[i+1]=$((${diff_size[i+1]}/2352))

          fi

     done

     fine_count=${#fine_list[@]}
     task_count=${#task_list[@]}
}

function repair_audio
{
     local source_track="${1}"
     local target_track="${game_dir}/${bin_name[${task}]}"

     local file_size=${file_size[${task}]}
     local diff_size=${diff_size[${task}]}

     (( ${task} < 4 )) && null_size=${null_low} && null_data="${temp}/null_low"
     (( ${task} > 3 )) && null_size=${null_high} && null_data="${temp}/null_high"

     case ${diff_size} in

          150) tail --bytes=$((${file_size}-${null_size})) "${source_track}" |
               {
                    cat "${temp}/audio_pregap" - "${null_data}" > "${target_track}"
               } ;;

          75)  tail --bytes=$((${file_size}-${null_size})) "${source_track}" |
               {
                    cat "${temp}/audio_pregap" - "${null_data}" |
                    {
                         head --bytes=$((${file_size}+2352*75)) > "${target_track}"
                    }
               } ;;

          0)   tail --bytes=$((${file_size}-${null_size})) "${source_track}" |
               {
                    cat "${temp}/audio_pregap" - "${null_data}" |
                    {
                         head --bytes=$((${file_size})) > "${target_track}"
                    }
               } ;;

          *)   echo -e "\n   \e[41m unknown audio track format for ${source_track} \e[0m\n"
               exit 9 ;;

     esac
}

function repair_data
{
     local source_track="${1}"
     local target_track="${game_dir}/${bin_name[${task}]}"

     (( ${diff_size[${task}]} != 225 )) &&
     {
          echo -e "\n   \e[41m unknown data track format for ${source_track} \e[0m\n"
          exit 10
     }

     # track start

     track_start="$(sp/read "${source_track}" 3 12)"

     track_minute="${track_start:0:2}"
     track_second="${track_start:3:2}"
     track_frame="${track_start:6:2}"

     [[ "${track_minute:0:1}" == 'a' ]] && track_minute="10${track_minute:1}"
     [[ "${track_minute:0:1}" == 'b' ]] && track_minute="11${track_minute:1}"
     [[ "${track_minute:0:1}" == 'c' ]] && track_minute="12${track_minute:1}"

     # blank start

     declare -i blank_minute=${track_minute}
     declare -i blank_second=${track_second}-2
     declare -i blank_frame=${track_frame}

     (( ${blank_second} < 0 )) && blank_second+=60 && blank_minute+=-1

     # pregap generation

     sp/write -d "${temp}/data_pregap" ${blank_minute} ${blank_second} ${blank_frame}

     sp/edcre -s 75 -k "${temp}/data_pregap" &> /dev/null

     cat "${temp}/data_pregap" "${source_track}" > "${target_track}"
}

function check_repair
{
     fix_md5[${task}]="$(get_md5 "${game_dir}/${bin_name[${task}]}")"

     [[ "${fix_md5[${task}]}" == "${bin_md5[${task}]}" ]] && bin_match[${task}]=1 || bin_match[${task}]=0

     pass_count=$((${pass_count}+${bin_match[${task}]}))
     #fail_count=$((${task_count}-${pass_count}))

     match_count=$((${fine_count}+${pass_count}))

     return 0
}

function print_repair
{
     echo -n "   > track ${task}"

     (( ${diff_size[${task}]} != 225 )) && echo -en "\t type | audio"
     (( ${diff_size[${task}]} == 225 )) && echo -en "\t type | data"

     (( ${bin_match[${task}]} == 1 )) && echo -e "\t\e[32m  success  \e[0m"
     (( ${bin_match[${task}]} == 0 )) && echo -e "\t\e[31m  failure  \e[0m"
}

function repair_track
{
     echo ""

     declare -a fine_list
     declare -a task_list

     define_status

     sp/write -a "${temp}/audio_pregap"

     for (( i=0 ; i<${task_count} ; i++ )) ; do

          task=${task_list[i]}
          track="${file_path[${task}]}"

          sector="$(sp/read "${track}" $((2352+12)) 5000)"

          sync='00 ff ff ff ff ff ff ff ff ff ff 00'

          [[ "${sector}" =~ "${sync}" ]] && repair_data "${track}" || repair_audio "${track}"

          check_repair && print_repair

     done

     echo ""
}


# Cue generation
#

function create_cue
{
     {

          echo -en "REM SINGLE-DENSITY AREA\r\n"
          echo -en "FILE \"${bin_name[1]}\" BINARY\r\n"
          echo -en "  TRACK 01 MODE1/2352\r\n"
          echo -en "    INDEX 01 00:00:00\r\n"
          echo -en "FILE \"${bin_name[2]}\" BINARY\r\n"
          echo -en "  TRACK 02 AUDIO\r\n"
          echo -en "    INDEX 00 00:00:00\r\n"
          echo -en "    INDEX 01 00:02:00\r\n"
          echo -en "REM HIGH-DENSITY AREA\r\n"
          echo -en "FILE \"${bin_name[3]}\" BINARY\r\n"
          echo -en "  TRACK 03 MODE1/2352\r\n"
          echo -en "    INDEX 01 00:00:00\r\n"

          for (( i=4 ; i<${bin_count}+1 ; i++ )) ; do

               (( i <= 9 )) && track_num="0${i}"
               (( i >= 10 )) && track_num="${i}"

               (( ${diff_size[i]} != 225 )) && track_typ='AUDIO' && index_sec='02'
               (( ${diff_size[i]} == 225 )) && track_typ='MODE1/2352' && index_sec='03'

               echo -en "FILE \"${bin_name[i]}\" BINARY\r\n"
               echo -en "  TRACK ${track_num} ${track_typ}\r\n"
               echo -en "    INDEX 00 00:00:00\r\n"
               echo -en "    INDEX 01 00:${index_sec}:00\r\n"

          done

     }    > "${game_dir}/${cue_name}"

     check_cue && print_cue
}

function check_cue
{
     created_cue_md5="$(get_md5 "${game_dir}/${cue_name}")"

     [[ "${created_cue_md5}" == "${cue_md5}" ]] && cue_match='true' || cue_match='false'

     return 0
}

function print_cue
{
     [[ "${cue_match}" == 'true' ]] && echo -e "\n   > cue \t term | CRLF \t\e[32m  success  \e[0m\n"
     [[ "${cue_match}" == 'false' ]] && echo -e "\n   > cue \t term | CRLF \t\e[31m  failure  \e[0m\n"
}


# Correction result
#

function print_report
{
     # DEBUG (( ${#fine_count} < ${#file_count} )) && fine_count=" ${fine_count}"
     # DEBUG (( ${#pass_count} < ${#file_count} )) && pass_count=" ${pass_count}"
     # DEBUG (( ${#fail_count} < ${#file_count} )) && fail_count=" ${fail_count}"

     (( ${#match_count} < ${#file_count} )) && match_count=" ${match_count}"

     echo -e "\n   ${file_count} / ${file_count} tracks match TOSEC database"
     echo -e "   ${match_count} / ${file_count} tracks match Redump database\n"

     # DEBUG echo "   ${fine_count} / ${file_count} tracks did not need correction"
     # DEBUG echo "   ${pass_count} / ${file_count} tracks could be corrected"
     # DEBUG echo "   ${fail_count} / ${file_count} tracks could not be corrected"

     print_result
}

function print_result
{
     if (( ${match_count} == ${file_count} )) && [[ "${cue_match}" == 'true' ]] ; then

          echo -e "   \e[42m success \e[0m"
     else
          echo -e "   \e[41m failure \e[0m"

     fi
}


# Disc archival
#

function create_zip
{
     [[ "${zip_mode}" != 'true' ]] && return 0

     echo -e "\n   ...compressing disc image"

     zip -rj "archive/${redump_name}.zip" "${game_dir}" &> /dev/null

     rm -r "${game_dir}"
}


# Script execution
#

function execute
{
     echo ""
     echo "   DCSDCHK ${version}"
     echo ""

     echo -e "   \e[40m retrieving base information \e[0m"
     get_db_info

     echo -e "   \e[40m retrieving header information \e[0m"
     get_header_info

     echo -e "   \e[40m retrieving file information \e[0m"
     get_file_info

     echo -e "   \e[40m identifying TOSEC name \e[0m"
     identify_tosec

     echo -e "   \e[40m identifying Redump name \e[0m"
     identify_redump

     select_name

     echo -e "   \e[40m retrieving entry information \e[0m"
     get_rom_info

     echo -e "   \e[40m calculating disc offset \e[0m"
     define_offset

     echo -e "   \e[40m performing track correction \e[0m"
     repair_track

     echo -e "   \e[40m performing cue generation \e[0m"
     create_cue

     echo -e "   \e[40m confirming dump check \e[0m"
     print_report

     create_zip

     echo ""
}

execute
